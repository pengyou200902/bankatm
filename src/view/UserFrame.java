/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * @author oshorawal
 */
package view;

import controller.*;
import model.*;

import java.awt.*;
import java.util.List;
import javax.swing.*;
import javax.swing.table.*;

public class UserFrame extends javax.swing.JDialog {
    private BankAccountController bank_account_controller;
    private BankAccount[] accounts;
    private User user;

    /**
     * Creates new form User_frame
     */
    public UserFrame(User user) {
        this.user = user;
        bank_account_controller = new BankAccountController();
        initComponents();
        clear_table();
        addDataToTable();
//        User_frame.getContentPane().setBackground(Color.BLUE);
        jPanel1.setBackground(Color.GREEN);
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        add_account_button = new javax.swing.JButton();
        Close_account_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        account_table = new javax.swing.JTable();
        account_view_button = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        add_account_button.setText("Add Account");
        add_account_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_account_buttonActionPerformed(evt);
            }
        });

        Close_account_button.setText("Close Account");
        Close_account_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Close_account_buttonActionPerformed(evt);
            }
        });

        account_table.setAutoCreateRowSorter(true);
        account_table.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null},
                        {null, null},
                        {null, null}
                },
                new String[]{
                        "Account Type", "Account Number"
                }
        ));
        account_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        account_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(account_table);

        account_view_button.setText("View Account");
        account_view_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_view_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(8, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(add_account_button, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Close_account_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(account_view_button, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(add_account_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Close_account_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(account_view_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(212, 212, 212))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_account_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_account_buttonActionPerformed
        // TODO add your handling code here:
        AddAccount acc = new AddAccount(this, true, this.user);
        acc.setVisible(true);
        clear_table();
        addDataToTable();

    }//GEN-LAST:event_add_account_buttonActionPerformed

    private void Close_account_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Close_account_buttonActionPerformed
        // TODO add your handling code here:
        int row_selected = account_table.getSelectedRow();
        if (row_selected >= 0) {
            remove_account(row_selected);
            remove_data_from_table(row_selected);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Select an account in table which you want to delete", "Error", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_Close_account_buttonActionPerformed

    private void account_view_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_view_buttonActionPerformed
        // TODO add your handling code here:
        int row_selected = account_table.getSelectedRow();
        String acc_type = ((AccountTypes) account_table.getValueAt(row_selected, 0)).getTypeString();
        String account_number = (String) account_table.getValueAt(row_selected, 1);
        BankAccount[] user_acc = bank_account_controller.getAllBankAccounts(this.user.getUsername());

        if (acc_type.equalsIgnoreCase(AccountTypes.SECURITY.getTypeString())) {
            SecurityAccount sec_acc = new SecurityAccount((Security) user_acc[2]);
            sec_acc.setVisible(true);
        } else if (acc_type.equalsIgnoreCase(AccountTypes.SAVING.getTypeString())) {
            UserAccount acc = new UserAccount(this, true, user_acc[1], "SAVING");
            acc.setVisible(true);
        } else { // checking
            UserAccount acc = new UserAccount(this, true, user_acc[0], "CHECKING");
            acc.setVisible(true);
        }
    }//GEN-LAST:event_account_view_buttonActionPerformed

    private void add_data_to_table() {
        DefaultTableModel table = (DefaultTableModel) account_table.getModel();
        // In every bank account in model class we should add the parameter of the type of the account
        table.addRow(new Object[]{this.accounts[this.accounts.length - 1].getType(), this.accounts[this.accounts.length - 1].getAccountNumber()});
    }

    private void remove_data_from_table(int row) {
        DefaultTableModel table = (DefaultTableModel) account_table.getModel();
        table.removeRow(row);
    }

    private void remove_account(int row) {
        String account_number = (String) account_table.getValueAt(row, 1);
        String type = ((AccountTypes) account_table.getValueAt(row, 0)).getTypeString();
        // Add get_account by account number in bank account controller class.
        BankAccount account_to_remove = (BankAccount) bank_account_controller.getAccountByNumber(account_number).data;

        bank_account_controller.closeAccount(account_to_remove);

    }
    private void clear_table(){
        DefaultTableModel table = (DefaultTableModel)  account_table.getModel();
        for (int i = table.getRowCount() - 1; i >= 0; i--) {
            table.removeRow(i);
        }
    }

    private void addDataToTable(){
        DefaultTableModel table = (DefaultTableModel)  account_table.getModel();
        this.accounts = bank_account_controller.getAllBankAccounts(this.user.getUsername());
        Checking checking = (Checking) this.accounts[0];
        Saving saving = (Saving) this.accounts[1];
        Security security = (Security) this.accounts[2];
        if (checking != null)
            table.addRow(new Object[]{checking.getType(),checking.getAccountNumber()});
        if (saving != null)
            table.addRow(new Object[]{saving.getType(),saving.getAccountNumber()});
        if (security != null)
            table.addRow(new Object[]{security.getType(),security.getAccountNumber()});
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(User_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(User_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(User_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(User_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new User_frame(User user).setVisible(true);
//
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close_account_button;
    private javax.swing.JTable account_table;
    private javax.swing.JButton account_view_button;
    private javax.swing.JButton add_account_button;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
//    private javax.swing.JTable table;
}

//class JTableButtonRenderer implements TableCellRenderer {
//   private TableCellRenderer defaultRenderer;
//   public JTableButtonRenderer(TableCellRenderer renderer) {
//      defaultRenderer = renderer;
//   }
//   public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//      if(value instanceof Component)
//         return (Component)value;
//         return defaultRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//   }
//}


//class ButtonEditor extends DefaultCellEditor {
//
//private String label;
//
//public ButtonEditor(JCheckBox checkBox) {
//
//super(checkBox);
//
//}
//
//public Component getTableCellEditorComponent(JTable table, Object value,
//
//boolean isSelected, int row, int column) {
//
//label = (value == null) ? “” : value.toString();
//
//button.setText(label);
//
//return button;
//
//}
//
//public Object getCellEditorValue() {
//
//return new String(label);
//
//}

//}


//class JTableButtonModel extends AbstractTableModel {
//   private Object[][] rows = {{" "," ", new javax.swing.JButton("view")},{" ", " ",new javax.swing.JButton("View")},{" "," ", new javax.swing.JButton("View")}, {" "," ", new javax.swing.JButton("View")}};
//   private String[] columns = {"Account Type", "Acount number","view"};
//   public String getColumnName(int column) {
//      return columns[column];
//   }
//   public int getRowCount() {
//      return rows.length;
//   }
//   public int getColumnCount() {
//      return columns.length;
//   }
//   public Object getValueAt(int row, int column) {
//      return rows[row][column];
//   }
//   public boolean isCellEditable(int row, int column) {
//      return false;
//   }
//   public Class getColumnClass(int column) {
//      return getValueAt(0, column).getClass();
//   }
//}